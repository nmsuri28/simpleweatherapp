{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","zip","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","sent","json","_this","setState","main","temp","sys","weather","stop","className","components_Titles","components_Form","this","components_Weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35ac592c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Titles = () => (\r\n  <div>\r\n    <h1>Weather Finder</h1>\r\n    <p>Find out temperature, conditions and more...</p>\r\n  </div>\r\n);\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\nconst Form = props => (\r\n  <form onSubmit={props.getWeather}>\r\n    <input type=\"zip\" name=\"zip\" placeholder=\"ZipCode...\" />\r\n    <button>Get Weather</button>\r\n  </form>\r\n);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n  <div>\r\n    {props.city && props.country && (\r\n      <p>\r\n        Location: {props.city}, {props.country}\r\n      </p>\r\n    )}\r\n    {props.temperature &&<p>Temperature:  {props.temperature}</p>}\r\n    {props.humidity && <p>Humidity: {props.humidity}</p>}\r\n    {props.description && <p>Conditions: {props.description}</p>}\r\n    {props.error && <p>{props.error}</p>}\r\n  </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\n\nconst API_KEY = \"3b7f82473d6cad78d9711a79e90fff30\";\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  };\n\n  getWeather = async e => {\n    e.preventDefault();\n    const zip = e.target.elements.zip.value;\n    \n\n    const api_call = await fetch(\n      \"http://api.openweathermap.org/data/2.5/weather?zip=\" +\n        zip +\n        \"&appid=\" +\n        API_KEY +\n        \"&units=imperial\"\n    );\n    \n    const data = await api_call.json();\n    if (zip) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter zipcode\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n        <div className=\"main\">\n        <div className=\"container\">\n        <div className=\"row\">\n        <div className=\"col-xs-5 title-container\">\n        <Titles />\n        </div>\n        <div className=\"col-xs-7 form-container\">\n        <Form getWeather={this.getWeather} />\n        <div className=\"weather\">\n        <Weather\n          temperature={this.state.temperature}\n          city={this.state.city}\n          country={this.state.country}\n          humidity={this.state.humidity}\n          description={this.state.description}\n          error={this.state.error}\n        />\n        </div>\n        </div>\n      </div>\n      </div>\n      </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}